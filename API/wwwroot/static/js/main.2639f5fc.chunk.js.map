{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowinigs","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAling","marginBottom","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","secondary","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","textAlign","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","GridColumn","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","widescreen","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.2639f5fc.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay);\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) { // es un error de validación\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody)\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setmain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowinigs: (username: string, predicate:string) =>\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[];\n}\n\nexport class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n        Object.assign(this, init);\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n        if (activity) {\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.city = activity.city;\n            this.venue = activity.venue;\n        }\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string,\n    title: string,\n    category: string,\n    date: Date\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { format } from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate =(predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString());\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as { [key: string]: Activity[] })\n        )\n    }\n\n    loadActivities = async () => {\n        this.setLoadingInitial(true);\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.setLoadingInitial(true);\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user; // se obtiene el usuario\n        if (user) {\n            activity.isGoing = activity.attendees?.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees =\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => { this.loading = false });\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => { this.loading = false });\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                }\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    // no se permite eliminar la foto principal\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos!.filter(p => p.id !== photo.id);\n                }\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = { ...this.profile, ...profile as Profile }\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowinigs(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        console.log('predicado ' + predicate )\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!)\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => { this.loadingActivities = false })\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n    fbAccessToken: string | null = null;\n    fbLoading = false;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => { this.user = user; })\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => { this.user = user; })\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n\n    getFacebookLoginStatus = async () => {\n        //if (window.FB)\n        window.FB.getLoginStatus(response => {\n            if (response.status === 'connected') {\n                this.fbAccessToken = response.authResponse.accessToken;\n            }\n        })\n    }\n\n    facebookLogin = () => {\n        this.fbLoading = true;\n        const apiLogin = (accessToken: string) => {\n            agent.Account.fbLogin(accessToken).then(user => {\n                store.commonStore.setToken(user.token);\n                runInAction(() => {\n                    this.user = user;\n                    this.fbLoading = false;\n                })\n                history.push('/activities');\n            }).catch(error => {\n                console.log(error);\n                runInAction(() => this.fbLoading = false);\n            })\n        }\n        if (this.fbAccessToken) {\n            apiLogin(this.fbAccessToken);\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken);\n            }, { scope: 'public_profile,email' })\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ' + error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z'); // nos llegan fechas UTC de la BD, hay que forzarlo\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt); // No llega de BD e incluye la Z UTC al final\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ' + error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n    const { userStore: { user, logout } } = useStore();\n\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`}\n                                text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: '27px' }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item\n                    content='All activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    color='teal'\n                    content={profile.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileCard({ profile }: Props) {\n    function truncate(text: string | undefined) {\n        if (text) {\n            return text.length > 40 ? text.substring(0, 37) + '...' : text;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image\n                                size='mini'\n                                circular src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}\n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAling: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular\n                            src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n    );\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nexport default observer(function ActivityDashboard() {\n    const { activityStore } = useStore();\n    const { loadActivities, activityRegistry, pagination, setPagingParams } = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const { userStore } = useStore();\n\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.login(values)\n                .catch(error => setErrors({ error: 'Invalid email or password' }))}\n        >\n            {({ handleSubmit, isSubmitting, errors }) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error'\n                        render={() =>\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    );\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const { userStore } = useStore();\n\n    return (\n        <Formik\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.register(values)\n                .catch(error => setErrors({ error }))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required()\n            })}\n        >\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error'\n                        render={() =>\n                            <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting}\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                        <Divider horizontal inverted>Or</Divider>\n                        <Button\n                            loading={userStore.fbLoading}\n                            size='huge'\n                            inverted\n                            color='facebook'\n                            content='Login with Facebook'\n                            onClick={() => userStore.facebookLogin()}\n                        />\n                    </>\n                )}\n\n            </Container>\n        </Segment >\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    { text: 'Drinks', value: 'drinks' },\n    { text: 'Culture', value: 'culture'},\n    { text: 'Music', value: 'music'},\n    { text: 'Film', value: 'film'},\n    { text: 'Travel', value: 'travel'},\n    { text: 'Food', value: 'food'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Link } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        city: Yup.string().required(),\n        venue: Yup.string().required()\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activityy---' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={values => handleFormSubmit(values)}\n            >\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput placeholder='Title' name='title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button\n                            disabled={isSubmitting || !isValid || !dirty}\n                            loading={isSubmitting}\n                            floated='right'\n                            positive\n                            type='submit'\n                            content='Submit'\n                        />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup'\nimport { formatDistanceToNow } from 'date-fns/esm'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns'\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link}\n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`}\n                            color='orange'\n                            floated='right'>\n                                Manage Event\n                        </Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled}\n                        loading={loading}\n                        onClick={updateAttendance}\n                        color='teal'>\n                            Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n    if (!attendees) return null;\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>\n                            }\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid, GridColumn } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails() {\n    const { activityStore } = useStore();\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\n    const { id } = useParams<{ id: string }>()\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity])\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <GridColumn width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </GridColumn>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && (\n                <ValidationErrors errors={errors} />\n            )}\n        </>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const { commonStore } = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const { modalStore } = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import { Form, Formik } from 'formik';\nimport { Button } from 'semantic-ui-react';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport { observer } from 'mobx-react-lite';\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\n    const { profileStore: { profile, updateProfile } } = useStore();\n    return (\n        <Formik\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({ isSubmitting, isValid, dirty }) => (\n                <Form className='ui form'>\n                    <MyTextInput placeholder='Display Name' name='displayName' />\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\n                    <Button\n                        positive\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update profile'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEditForm from './ProfileEditForm';\n\nexport default observer(function ProfileAbout() {\n    const { profileStore: { isCurrentUser, profile } } = useStore();\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                            basic\n                            floated='right'\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} />\n                        : <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react';\nimport { UserActivity } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\nconst panes = [\n    { menuItem: 'Future events', pane: { key: 'future' } },\n    { menuItem: 'PastEvents', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n]\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\n                </Grid.Column>\n                <Grid.Column widescreen={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{height:200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : {...dzStyles}} >\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Cropper } from 'react-cropper';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    uploadPhoto: (file: Blob) => void;\n    loading: boolean;\n}\n\nexport default function PhotoUploadWidget({uploadPhoto, loading}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\n        }\n    }\n\n    // se limpia la memoria utilizada en dropzone\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                <>\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                    <Button.Group widths={2}>\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                    </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading,\n            loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                <Header floated='left' icon='image' content='Photos' />\n                {isCurrentUser && (\n                    <Button floated='right' basic\n                        content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                        onClick={() => setAddPhotoMode(!addPhotoMode)}\n                    />\n                )}\n            </Grid.Column>\n            <Grid.Column width={16}>\n                {addPhotoMode ? (\n                    <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                ) : (\n                    <Card.Group itemsPerRow={5}>\n                        {profile.photos?.map(photo => (\n                            <Card key={photo.id}>\n                                <Image src={photo.url} />\n                                {isCurrentUser && (\n                                    <Button.Group fluid widths={2}>\n                                        <Button\n                                            basic\n                                            color='green'\n                                            content='Main'\n                                            name={'main' + photo.id}\n                                            disabled={photo.isMain}\n                                            loading={target === 'main' + photo.id && loading}\n                                            onClick={e => handleSetMainPhoto(photo, e)}\n                                        />\n                                        <Button\n                                            basic\n                                            color='red'\n                                            icon='trash'\n                                            name={photo.id}\n                                            disabled={photo.isMain}\n                                            loading={target === photo.id && loading}\n                                            onClick={e => handleDeletePhoto(photo, e)}\n                                        />\n                                    </Button.Group>\n                                )}\n                            </Card>\n                        ))}\n                    </Card.Group>\n                )}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileContent({ profile }: Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        { menuItem: 'About', render: () => <ProfileAbout /> },\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\n    ];\n\n    return (\n        <Tab\n            menu={{ fluid: true, vertical: true }}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileHeader({ profile }: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile?.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile?.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n} ","import { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  // </> equival a emprar <Fragment/>\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory(); // así se puede usar en cualquier lugar de la aplicación\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}